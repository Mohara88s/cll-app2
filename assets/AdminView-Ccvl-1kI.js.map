{"version":3,"file":"AdminView-Ccvl-1kI.js","sources":["../../src/components/JokeTaskForm/JokeTaskForm.jsx","../../src/components/EditingJokeTaskModal/EditingJokeTaskModal.jsx","../../src/components/AdminJokesList/AdminJokesList.jsx","../../src/components/EditingJokesTasks/EditingJokesTasks.jsx","../../src/components/AdminPage/AdminPage.jsx","../../src/views/AdminView/AdminView.jsx"],"sourcesContent":["import { Button, Form, Dropdown, Spinner } from 'react-bootstrap';\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport ErrorMessage from '../ErrorMessage/ErrorMessage';\nimport { changeJokeTask } from '../../redux/joke-tasks/joke-tasks-actions';\nimport { addJokeTask } from '../../redux/joke-tasks/joke-tasks-operations';\nimport jokeTasksSelectors from '../../redux/joke-tasks/joke-tasks-selectors';\nimport { fetchJokeTasksLanguages } from '../../redux/joke-tasks/joke-tasks-operations';\nimport { confirm } from '../Confirmation/Confirmation';\nimport styles from './JokeTaskForm.module.css';\n\nexport default function JokeTaskForm() {\n  const dispatch = useDispatch();\n\n  const languages = useSelector(jokeTasksSelectors.getJokeTasksLanguages);\n  const languagesError = useSelector(\n    jokeTasksSelectors.getJokeTasksLanguagesError,\n  );\n  const languagesLoading = useSelector(\n    jokeTasksSelectors.getJokeTasksLanguagesLoading,\n  );\n  const error = useSelector(jokeTasksSelectors.getJokeTasksError);\n  const loading = useSelector(jokeTasksSelectors.getJokeTasksLoading);\n\n  useEffect(() => {\n    dispatch(fetchJokeTasksLanguages());\n  }, [dispatch]);\n\n  const jokeTask = useSelector(jokeTasksSelectors.getJokeTask);\n  const onClickButtonAddTranslation = () => {\n    const newId =\n      jokeTask.translations[jokeTask.translations.length - 1]._id + 1;\n    const newArr = [\n      ...jokeTask.translations,\n      { _id: newId, language: '', title: '', text: '' },\n    ];\n    dispatch(changeJokeTask({ ...jokeTask, translations: newArr }));\n  };\n  const onClickButtonDeleteTranslation = async ({ target: { name } }) => {\n    if (\n      await confirm('Are you sure you want to delete this translation field?')\n    ) {\n      if (jokeTask.translations.length > 2) {\n        const newArr = [...jokeTask.translations].filter(\n          e => e._id !== Number(name),\n        );\n        dispatch(changeJokeTask({ ...jokeTask, translations: newArr }));\n      }\n    }\n  };\n\n  const onAddButtonClick = async () => {\n    if (await confirm('Are you sure you want to add this task?')) {\n      dispatch(addJokeTask({ ...jokeTask }));\n    }\n  };\n\n  const handleChange = ({ target: { name, value, type } }) => {\n    switch (name) {\n      case 'jokeName':\n        return dispatch(changeJokeTask({ ...jokeTask, task_title: value }));\n      case name:\n        if (type === 'textarea') {\n          const newArr = [...jokeTask.translations].map(e =>\n            e._id === Number(name) ? { ...e, text: value } : e,\n          );\n          dispatch(changeJokeTask({ ...jokeTask, translations: newArr }));\n        }\n        if (type === 'text') {\n          const newArr = [...jokeTask.translations].map(e =>\n            e._id === Number(name) ? { ...e, title: value } : e,\n          );\n          dispatch(changeJokeTask({ ...jokeTask, translations: newArr }));\n        }\n        return;\n      default:\n        return;\n    }\n  };\n\n  const onDropdownClick = ({ target: { name, title } }) => {\n    const newLanguage = languages.find(e => e._id === name);\n    const newArr = [...jokeTask.translations].map(e =>\n      e._id === Number(title) ? { ...e, language: newLanguage } : e,\n    );\n    dispatch(changeJokeTask({ ...jokeTask, translations: newArr }));\n  };\n\n  return (\n    <div>\n      <Form autoComplete=\"off\" className={styles.form}>\n        <Form.Group className=\"mb-3\">\n          <Form.Label>Enter the name of the joke in English:</Form.Label>\n          <Form.Control\n            type=\"text\"\n            name=\"jokeName\"\n            placeholder=\"Enter the name of the joke\"\n            value={jokeTask.task_title}\n            onChange={handleChange}\n          />\n        </Form.Group>\n        {jokeTask && (\n          <ul>\n            {jokeTask.translations.map(elem => (\n              <li key={elem._id}>\n                <Form.Group className=\"mb-3\">\n                  <Form.Label>\n                    Choose the language and enter the version of the joke in the\n                    current language:\n                  </Form.Label>\n                  <Dropdown className={styles.dropdown}>\n                    <Dropdown.Toggle\n                      variant=\"outline-dark\"\n                      size=\"sm\"\n                      id=\"dropdown-basic\"\n                    >\n                      {elem.language.language_name\n                        ? elem.language.language_name\n                        : 'Langauage'}\n                    </Dropdown.Toggle>\n\n                    <Dropdown.Menu>\n                      <ul>\n                        {languages.map(e => (\n                          <li key={e._id}>\n                            <Dropdown.Item\n                              name={e._id}\n                              title={elem._id}\n                              onClick={onDropdownClick}\n                            >\n                              {e.language_name}\n                            </Dropdown.Item>\n                          </li>\n                        ))}\n                      </ul>\n                    </Dropdown.Menu>\n                  </Dropdown>\n                  <Form.Control\n                    type=\"text\"\n                    name={elem._id}\n                    placeholder=\"Enter the name of the joke in current language\"\n                    value={elem.title}\n                    onChange={handleChange}\n                    className={styles.jokeTitle}\n                  />\n                  <Form.Control\n                    as=\"textarea\"\n                    rows={5}\n                    name={elem._id}\n                    placeholder=\"joke in current language\"\n                    value={elem.text}\n                    onChange={handleChange}\n                  />\n                </Form.Group>\n\n                <Button\n                  variant=\"danger\"\n                  onClick={onClickButtonDeleteTranslation}\n                  className={styles.form__deleteButton}\n                  name={elem._id}\n                >\n                  Delete\n                </Button>\n              </li>\n            ))}\n          </ul>\n        )}\n      </Form>\n\n      <div className={styles.mainButtonsBox}>\n        <Button\n          variant=\"success\"\n          onClick={onClickButtonAddTranslation}\n          className={styles.mainButtonsBox__button}\n        >\n          Add one more translation of the joke\n        </Button>\n\n        <Button\n          variant=\"primary\"\n          className={styles.mainButtonsBox__button}\n          onClick={onAddButtonClick}\n        >\n          {!loading && <span>Add this joke to the database</span>}\n          {loading && <Spinner animation=\"border\" as=\"span\" size=\"sm\" />}\n        </Button>\n      </div>\n      {error && <ErrorMessage message={error} />}\n      {languagesError && <ErrorMessage message={languagesError} />}\n      {languagesLoading && <Spinner animation=\"border\" as=\"span\" size=\"sm\" />}\n    </div>\n  );\n}\n","import { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport jokeTasksSelectors from '../../redux/joke-tasks/joke-tasks-selectors';\nimport { changeJokeTask } from '../../redux/joke-tasks/joke-tasks-actions';\nimport {\n  updateJokeTask,\n  deleteJokeTask,\n} from '../../redux/joke-tasks/joke-tasks-operations';\nimport { Form, Dropdown, Modal, Button, Spinner } from 'react-bootstrap';\nimport { confirm } from '../Confirmation/Confirmation';\nimport ErrorMessage from '../ErrorMessage/ErrorMessage';\nimport styles from './EditingJokeTaskModal.module.css';\nimport './EditingJokeTaskModal.css';\n\nconst EditingJokeTaskModal = ({ modalShow, onHandleClose }) => {\n  const dispatch = useDispatch();\n  const [show, setShow] = useState(false);\n  const languages = useSelector(jokeTasksSelectors.getJokeTasksLanguages);\n  const jokeTask = useSelector(jokeTasksSelectors.getJokeTask);\n  const error = useSelector(jokeTasksSelectors.getJokeTasksError);\n  const loading = useSelector(jokeTasksSelectors.getJokeTasksLoading);\n\n  const handleClose = () => {\n    setShow(false);\n    onHandleClose();\n  };\n\n  useEffect(() => {\n    setShow(modalShow);\n  }, [modalShow]);\n\n  useEffect(() => {\n    if (!jokeTask.task_title) {\n      handleClose();\n    }\n    // eslint-disable-next-line\n  }, [jokeTask]);\n\n  const onClickButtonAddTranslation = () => {\n    const newId =\n      jokeTask.translations[jokeTask.translations.length - 1]._id + 1;\n    const newArr = [\n      ...jokeTask.translations,\n      { _id: newId, language: '', title: '', text: '' },\n    ];\n    dispatch(changeJokeTask({ ...jokeTask, translations: newArr }));\n  };\n  const onClickButtonDeleteTranslation = async ({ target: { name } }) => {\n    if (\n      await confirm('Are you sure you want to delete this translation field?')\n    ) {\n      if (jokeTask.translations.length > 2) {\n        const newArr = [...jokeTask.translations].filter(e => e._id !== name);\n        dispatch(changeJokeTask({ ...jokeTask, translations: newArr }));\n      }\n    }\n  };\n\n  const onSaveTaskButtonClick = async () => {\n    if (await confirm('Are you sure you want to save changes to this task?')) {\n      dispatch(\n        updateJokeTask({ taskId: jokeTask._id, update: { ...jokeTask } }),\n      );\n    }\n  };\n  const onDeleteTaskButtonClick = async () => {\n    if (await confirm('Are you sure you want to delete this task?')) {\n      dispatch(deleteJokeTask(jokeTask._id));\n    }\n  };\n\n  const handleChange = ({ target: { name, value, type } }) => {\n    switch (name) {\n      case 'jokeName':\n        return dispatch(changeJokeTask({ ...jokeTask, task_title: value }));\n      case name:\n        if (type === 'textarea') {\n          const newArr = [...jokeTask.translations].map(e =>\n            e._id === name ? { ...e, text: value } : e,\n          );\n          dispatch(changeJokeTask({ ...jokeTask, translations: newArr }));\n        }\n        if (type === 'text') {\n          const newArr = [...jokeTask.translations].map(e =>\n            e._id === name ? { ...e, title: value } : e,\n          );\n          dispatch(changeJokeTask({ ...jokeTask, translations: newArr }));\n        }\n        return;\n      default:\n        return;\n    }\n  };\n\n  const onDropdownClick = ({ target: { name, title } }) => {\n    const newLanguage = languages.find(e => e._id === name);\n    const newArr = [...jokeTask.translations].map(e =>\n      e._id === title ? { ...e, language: newLanguage } : e,\n    );\n    dispatch(changeJokeTask({ ...jokeTask, translations: newArr }));\n  };\n\n  return (\n    <>\n      {jokeTask && (\n        <Modal\n          show={show}\n          onHide={handleClose}\n          centered\n          className={styles.editingJokeModal}\n          dialogClassName=\"EditingJokeTaskModalDialog\"\n        >\n          <Modal.Header closeButton className={styles.editingJokeModal__header}>\n            <Modal.Title>Joke task Id:{jokeTask._id}</Modal.Title>\n          </Modal.Header>\n          <Modal.Body className={styles.editingJokeModal__body}>\n            <Form autoComplete=\"off\" className={styles.editingJokeModalForm}>\n              <Form.Group className=\"mb-3\">\n                <Form.Label>The name of the joke in English:</Form.Label>\n                <Form.Control\n                  type=\"text\"\n                  name=\"jokeName\"\n                  placeholder=\"Enter the name of the joke\"\n                  value={jokeTask.task_title}\n                  onChange={handleChange}\n                />\n              </Form.Group>\n              {jokeTask && (\n                <ul>\n                  {jokeTask.translations.map(elem => (\n                    <li key={elem._id}>\n                      <Form.Group className=\"mb-3\">\n                        <Form.Label\n                          className={styles.editingJokeModalForm__label}\n                        >\n                          The version of the joke in the\n                          <Dropdown\n                            className={styles.editingJokeModal__dropdown}\n                          >\n                            <Dropdown.Toggle\n                              variant=\"outline-dark\"\n                              size=\"sm\"\n                              id=\"dropdown-basic\"\n                            >\n                              {elem.language.language_name\n                                ? elem.language.language_name\n                                : 'Langauage'}\n                            </Dropdown.Toggle>\n\n                            <Dropdown.Menu>\n                              <ul>\n                                {languages.map(e => (\n                                  <li key={e._id}>\n                                    <Dropdown.Item\n                                      name={e._id}\n                                      title={elem._id}\n                                      onClick={onDropdownClick}\n                                    >\n                                      {e.language_name}\n                                    </Dropdown.Item>\n                                  </li>\n                                ))}\n                              </ul>\n                            </Dropdown.Menu>\n                          </Dropdown>{' '}\n                          language:\n                        </Form.Label>\n\n                        <Form.Control\n                          type=\"text\"\n                          name={elem._id}\n                          placeholder=\"Enter the name of the joke in current language\"\n                          value={elem.title}\n                          onChange={handleChange}\n                          className={styles.editingJokeModalForm__jokeTitle}\n                        />\n                        <Form.Control\n                          as=\"textarea\"\n                          rows={5}\n                          name={elem._id}\n                          placeholder=\"joke in current language\"\n                          value={elem.text}\n                          onChange={handleChange}\n                        />\n                      </Form.Group>\n\n                      <Button\n                        variant=\"danger\"\n                        onClick={onClickButtonDeleteTranslation}\n                        className={styles.editingJokeModalForm__deleteButton}\n                        name={elem._id}\n                      >\n                        Delete\n                      </Button>\n                    </li>\n                  ))}\n                </ul>\n              )}\n            </Form>\n            <div className={styles.editingJokeModalMainButtonsBox}>\n              <Button\n                variant=\"success\"\n                onClick={onClickButtonAddTranslation}\n                className={styles.editingJokeModalMainButtonsBox__button}\n              >\n                Add one more translation of the joke\n              </Button>\n              <Button\n                variant=\"danger\"\n                className={styles.editingJokeModalMainButtonsBox__button}\n                onClick={onDeleteTaskButtonClick}\n              >\n                {!loading && <span>Delete task from the database</span>}\n                {loading && <Spinner animation=\"border\" as=\"span\" size=\"sm\" />}\n              </Button>\n              <Button\n                variant=\"primary\"\n                className={styles.editingJokeModalMainButtonsBox__button}\n                onClick={onSaveTaskButtonClick}\n              >\n                {!loading && <span>Save changes to the database</span>}\n                {loading && <Spinner animation=\"border\" as=\"span\" size=\"sm\" />}\n              </Button>\n            </div>\n            {error && <ErrorMessage message={error} />}\n          </Modal.Body>\n        </Modal>\n      )}\n    </>\n  );\n};\n\nexport default EditingJokeTaskModal;\n","import { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Button, Form, Table, Spinner } from 'react-bootstrap';\nimport {\n  changeFilter,\n  changeJokeTask,\n} from '../../redux/joke-tasks/joke-tasks-actions';\nimport jokeTasksSelectors from '../../redux/joke-tasks/joke-tasks-selectors';\nimport { fetchJokeTasks } from '../../redux/joke-tasks/joke-tasks-operations';\nimport ErrorMessage from '../ErrorMessage/ErrorMessage';\nimport EditingJokeTaskModal from '../EditingJokeTaskModal/EditingJokeTaskModal';\nimport styles from './AdminJokesList.module.css';\n\nexport default function JokesList() {\n  const dispatch = useDispatch();\n  const originalLanguage = useSelector(jokeTasksSelectors.getOriginalLanguage);\n  const translationLanguage = useSelector(\n    jokeTasksSelectors.getTranslationLanguage,\n  );\n  const tasks = useSelector(jokeTasksSelectors.getJokeTasks);\n  const error = useSelector(jokeTasksSelectors.getJokeTasksError);\n  const loading = useSelector(jokeTasksSelectors.getJokeTasksLoading);\n  const filter = useSelector(jokeTasksSelectors.getJokeTasksFilter);\n  const [filtredTasks, setFiltredTasks] = useState([]);\n  const [modalShow, setModalShow] = useState(false);\n\n  const filterHandleChange = ({ target: { value } }) => {\n    dispatch(changeFilter(value));\n  };\n\n  const onEditBtnClick = ({ target: { name } }) => {\n    const task = filtredTasks.find(e => e._id === name);\n    dispatch(changeJokeTask({ ...task }));\n    setModalShow(true);\n  };\n\n  useEffect(() => {\n    if (originalLanguage !== null && translationLanguage !== null) {\n      dispatch(\n        fetchJokeTasks(\n          filter,\n          originalLanguage.language_name,\n          translationLanguage.language_name,\n        ),\n      );\n    }\n  }, [dispatch, filter, originalLanguage, translationLanguage]);\n\n  useEffect(() => {\n    setFiltredTasks(tasks);\n  }, [tasks]);\n\n  return (\n    <div className={styles.tasksFilter}>\n      <Form autoComplete=\"off\">\n        <Form.Group className=\"mb-3\" controlId=\"filter\">\n          <Form.Label>Jokes search:</Form.Label>\n          <Form.Control\n            type=\"text\"\n            name=\"filter\"\n            placeholder=\"Enter letters for joke search\"\n            value={filter}\n            onChange={filterHandleChange}\n          />\n        </Form.Group>\n      </Form>\n\n      <Table striped bordered hover className={styles.table}>\n        <thead>\n          <tr>\n            <td className={styles.tableTd__english}>Title</td>\n            <td className={styles.tableTd__languages}>Translations</td>\n            <td className={styles.tableTd__button}></td>\n          </tr>\n        </thead>\n        {!loading && (\n          <tbody className={styles.table__tbody}>\n            {filtredTasks.map(({ _id, task_title, languages }) => (\n              <tr key={_id}>\n                <td>{task_title}</td>\n                <td>\n                  {[...languages]\n                    .sort((e, i) =>\n                      e.language_name.localeCompare(i.language_name),\n                    )\n                    .map(({ language_name }) => (\n                      <span key={language_name}>{language_name}/</span>\n                    ))}\n                </td>\n                <td>\n                  <Button name={_id} onClick={onEditBtnClick} variant=\"warning\">\n                    Edit\n                  </Button>\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        )}\n      </Table>\n      {error && <ErrorMessage message={error} />}\n      {loading && <Spinner animation=\"border\" variant=\"primary\" />}\n\n      <EditingJokeTaskModal\n        modalShow={modalShow}\n        onHandleClose={() => setModalShow(false)}\n      />\n    </div>\n  );\n}\n","import ChooseLanguages from '../ChooseLanguages/ChooseLanguages';\nimport AdminJokesList from '../AdminJokesList/AdminJokesList';\n\nexport default function EditingJokesTasks() {\n  return (\n    <div>\n      <ChooseLanguages />\n      <AdminJokesList />\n    </div>\n  );\n}\n","import { useState, useEffect } from 'react';\nimport JokeTaskForm from '../JokeTaskForm/JokeTaskForm';\nimport EditingJokesTasks from '../EditingJokesTasks/EditingJokesTasks';\nimport { Tabs, Tab } from 'react-bootstrap';\n\nexport default function AdminPage() {\n  useEffect(() => {\n    window.scrollBy(0, -1000);\n  }, []);\n  const [keyAdminTabs, setKeyAdminTabs] = useState('joke-task-form');\n  return (\n    <div>\n      <h2>Administrator page</h2>\n      <Tabs\n        id=\"admin-tabs\"\n        activeKey={keyAdminTabs}\n        onSelect={k => setKeyAdminTabs(k)}\n        className=\"mb-3\"\n      >\n        <Tab eventKey=\"joke-task-form\" title=\"Form to adding joke task\">\n          <JokeTaskForm />\n        </Tab>\n\n        <Tab eventKey=\"editing-joke-task\" title=\"Editing joke tasks\">\n          <EditingJokesTasks />\n        </Tab>\n      </Tabs>\n    </div>\n  );\n}\n","import AdminPage from '../../components/AdminPage/AdminPage';\n\nexport default function AdminView() {\n  return (\n    <>\n      <AdminPage />\n    </>\n  );\n}\n"],"names":["JokeTaskForm","dispatch","useDispatch","languages","useSelector","jokeTasksSelectors","languagesError","languagesLoading","error","loading","useEffect","fetchJokeTasksLanguages","jokeTask","onClickButtonAddTranslation","newId","newArr","changeJokeTask","onClickButtonDeleteTranslation","name","confirm","e","onAddButtonClick","addJokeTask","handleChange","value","type","onDropdownClick","title","newLanguage","jsxs","Form","styles","jsx","elem","Dropdown","Button","Spinner","ErrorMessage","EditingJokeTaskModal","modalShow","onHandleClose","show","setShow","useState","handleClose","onSaveTaskButtonClick","updateJokeTask","onDeleteTaskButtonClick","deleteJokeTask","Modal","JokesList","originalLanguage","translationLanguage","tasks","filter","filtredTasks","setFiltredTasks","setModalShow","filterHandleChange","changeFilter","onEditBtnClick","task","fetchJokeTasks","Table","_id","task_title","i","language_name","EditingJokesTasks","ChooseLanguages","AdminJokesList","AdminPage","keyAdminTabs","setKeyAdminTabs","Tabs","k","Tab","AdminView","Fragment"],"mappings":"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"}