{"version":3,"file":"SentencesTrainingsView-BaGGNe_s.js","sources":["../../src/redux/sentences-tasks/sentences-tasks-selectors.js","../../src/components/SentencesTrainings/SentencesTrainings.jsx","../../src/components/SentencesTrainingsPage/SentencesTrainingsPage.jsx","../../src/views/SentencesTrainingsView/SentencesTrainingsView.jsx"],"sourcesContent":["const getSentencesTasksError = state => state.sentencesTasks.error;\nconst getSentencesTasksLoading = state => state.sentencesTasks.loading;\nconst getSentencesTasks = state => state.sentencesTasks.tasks;\n\nconst sentencesTasksSelectors = {\n  getSentencesTasksError,\n  getSentencesTasksLoading,\n  getSentencesTasks,\n};\nexport default sentencesTasksSelectors;\n","import { useState, useEffect } from 'react';\nimport { Button } from 'react-bootstrap';\nimport TaskCongratulation from '../TaskCongratulation/TaskCongratulation';\nimport TrainingCongratulation from '../TrainingCongratulation/TrainingCongratulation';\n\nimport styles from './SentencesTrainings.module.css';\n\nexport default function SentencesTrainings({\n  sentencesList,\n  onResolvedTraining,\n}) {\n  const [actualId, setActualId] = useState(0);\n  const [losts, setLosts] = useState(0);\n  const [attempts, setAttempts] = useState(0);\n  const [resolved, setResolved] = useState(false);\n  const [sentenceId, setSentenceId] = useState(0);\n  const [originalArray, setOriginalArray] = useState([]);\n  const [mixedArray, setMixedArray] = useState([]);\n  const [resolvedArray, setResolvedArray] = useState([]);\n  const [modalShow, setModalShow] = useState(false);\n\n  useEffect(() => {\n    if (sentencesList[sentenceId].translation) {\n      setOriginalArray([\n        ...sentencesList[sentenceId].translation\n          .split(' ')\n          .filter(e => e.length),\n      ]);\n    }\n  }, [sentenceId, sentencesList]);\n\n  useEffect(() => {\n    setMixedArray([\n      ...[...originalArray].sort(() => {\n        return 0.5 - Math.random();\n      }),\n    ]);\n    setResolvedArray([]);\n  }, [originalArray]);\n\n  const onClickSentenceButton = e => {\n    const buttonValue = e.currentTarget.getAttribute('value');\n    const id = Number.parseInt(e.currentTarget.getAttribute('data-id'));\n\n    if (buttonValue === originalArray[actualId]) {\n      onRightButtonClick(e.currentTarget, id, buttonValue);\n    } else {\n      onWrongButtonClick(e.currentTarget);\n    }\n    setAttempts(prevState => prevState + 1);\n    if (actualId >= originalArray.length - 1) {\n      onPositiveTrainingResult();\n    }\n  };\n\n  const onWrongButtonClick = button => {\n    setLosts(prevState => prevState + 1);\n    button.classList.remove('btn-primary');\n    button.classList.add('btn-danger');\n    setTimeout(() => {\n      button.classList.remove('btn-danger');\n      button.classList.add('btn-primary');\n    }, 300);\n  };\n\n  const onRightButtonClick = (button, id, value) => {\n    button.classList.remove('btn-primary');\n    button.classList.add('btn-success');\n    setTimeout(() => {\n      resolvedArray.push(value);\n      button.disabled = true;\n      button.style.color = 'transparent';\n      button.style.background = 'transparent';\n      button.style.borderColor = 'transparent';\n      button.classList.remove('btn-success');\n      button.classList.add('btn-primary');\n      setActualId(prevState => prevState + 1);\n    }, 300);\n  };\n\n  const onPositiveTrainingResult = () => {\n    setTimeout(() => {\n      setMixedArray([]);\n      setResolved(true);\n    }, 300);\n  };\n  const onClickButtonNext = () => {\n    if (sentenceId >= sentencesList.length - 1) {\n      setModalShow(true);\n    } else {\n      setSentenceId(prevState => prevState + 1);\n    }\n    setActualId(0);\n    setLosts(0);\n    setAttempts(0);\n    setResolved(false);\n    setResolvedArray([]);\n  };\n\n  const onCloseModal = () => {\n    setModalShow(false);\n    onResolvedTraining();\n  };\n\n  return (\n    <div className={styles.SentencesTrainings}>\n      <h3>Sentence in original language</h3>\n      {!sentencesList[sentenceId].original && (\n        <h3 className={styles.warning}>no original available</h3>\n      )}\n      <p className={styles.originalSentence}>\n        {sentencesList[sentenceId].original}\n      </p>\n\n      <h3>Sentence in translation language</h3>\n      <ul className={styles.fealdsList}>\n        <li className={styles.fealdsList__item}>\n          <h4 className={styles.fealdHeader}>Unresolved sentence</h4>\n          {!sentencesList[sentenceId].translation && (\n            <h3 className={styles.warning}>no translation available</h3>\n          )}\n          <ul className={styles.listTags}>\n            {mixedArray.map((elem, id) => (\n              <li key={id} className={styles.listTags__item}>\n                <Button\n                  variant=\"primary\"\n                  data-id={id}\n                  onClick={onClickSentenceButton}\n                  value={elem}\n                  className={styles.listTags__button}\n                >\n                  {elem}\n                </Button>\n              </li>\n            ))}\n          </ul>\n          {resolved && (\n            <TaskCongratulation\n              attempts={attempts}\n              losts={losts}\n              onClickButtonNext={onClickButtonNext}\n            />\n          )}\n        </li>\n        <li className={styles.fealdsList__item}>\n          <h4 className={styles.fealdHeader}>Resolved sentence </h4>\n          <ul className={styles.listTags}>\n            {resolvedArray.map((elem, id) => (\n              <li key={id} className={styles.listTags__item}>\n                <Button variant=\"primary\" className={styles.listTags__button}>\n                  {elem}\n                </Button>\n              </li>\n            ))}\n          </ul>\n        </li>\n      </ul>\n      <Button\n        variant=\"primary\"\n        onClick={onClickButtonNext}\n        className={styles.skipButton}\n      >\n        Skip task\n      </Button>\n      <TrainingCongratulation\n        modalShow={modalShow}\n        onHandleClose={onCloseModal}\n        congratulationText=\"Congratulations! You have practiced this set of sentences.\"\n      />\n    </div>\n  );\n}\n","import { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Form, Button, Spinner } from 'react-bootstrap';\nimport sentencesTasksSelectors from '../../redux/sentences-tasks/sentences-tasks-selectors';\nimport jokeTasksSelectors from '../../redux/joke-tasks/joke-tasks-selectors';\nimport {\n  fetchSentencesTasks,\n  fetchSentencesTasksByJokeTaskId,\n} from '../../redux/sentences-tasks/sentences-tasks-operations';\nimport JokesList from '../JokesList/JokesList';\nimport ChooseLanguages from '../ChooseLanguages/ChooseLanguages';\nimport SentencesTrainings from '../SentencesTrainings/SentencesTrainings';\nimport ErrorMessage from '../ErrorMessage/ErrorMessage';\nimport styles from './SentencesTrainingsPage.module.css';\n\nexport default function SentencesTrainingsPage() {\n  const dispatch = useDispatch();\n  useEffect(() => {\n    window.scrollBy(0, -1000);\n  }, []);\n  const [sentencesList, setSentencesList] = useState([]);\n  const [random, setRandom] = useState(false);\n  const originalLanguage = useSelector(jokeTasksSelectors.getOriginalLanguage);\n  const translationLanguage = useSelector(\n    jokeTasksSelectors.getTranslationLanguage,\n  );\n  const tasks = useSelector(sentencesTasksSelectors.getSentencesTasks);\n  const error = useSelector(sentencesTasksSelectors.getSentencesTasksError);\n  const loading = useSelector(sentencesTasksSelectors.getSentencesTasksLoading);\n\n  const onClickTrainButton = () => {\n    dispatch(\n      fetchSentencesTasks(\n        originalLanguage.language_name,\n        translationLanguage.language_name,\n        20,\n      ),\n    );\n  };\n\n  useEffect(() => {\n    setSentencesList(tasks);\n  }, [tasks]);\n\n  const onResolvedTraining = () => {\n    setSentencesList([]);\n  };\n\n  const trainTask = task => {\n    dispatch(\n      fetchSentencesTasksByJokeTaskId(\n        task._id,\n        originalLanguage.language_name,\n        translationLanguage.language_name,\n        random,\n      ),\n    );\n  };\n\n  return (\n    <div>\n      <h2>Sentences trainings</h2>\n      {!sentencesList[0] && (\n        <>\n          <ChooseLanguages />\n          <Button\n            variant=\"primary\"\n            onClick={onClickTrainButton}\n            className={styles.trainButton}\n          >\n            {!loading && (\n              <span>\n                Press the button to generate 20 random sentences and practice it\n              </span>\n            )}\n            {loading && <Spinner animation=\"border\" as=\"span\" size=\"sm\" />}\n          </Button>\n          <Form.Check // prettier-ignore\n            type=\"checkbox\"\n            checked={random}\n            onChange={() => setRandom(!random)}\n            label=\"Sentences in the task are random\"\n          />\n          <JokesList passUpTask={trainTask} />\n        </>\n      )}\n\n      {sentencesList[0] && (\n        <SentencesTrainings\n          sentencesList={sentencesList}\n          onResolvedTraining={onResolvedTraining}\n        />\n      )}\n      {error && <ErrorMessage message={error} />}\n    </div>\n  );\n}\n","import SentencesTrainingsPage from '../../components/SentencesTrainingsPage/SentencesTrainingsPage';\nexport default function SentencesTrainingsView() {\n  return (\n    <>\n      <SentencesTrainingsPage />\n    </>\n  );\n}\n"],"names":["getSentencesTasksError","state","getSentencesTasksLoading","getSentencesTasks","sentencesTasksSelectors","SentencesTrainings","sentencesList","onResolvedTraining","actualId","setActualId","useState","losts","setLosts","attempts","setAttempts","resolved","setResolved","sentenceId","setSentenceId","originalArray","setOriginalArray","mixedArray","setMixedArray","resolvedArray","setResolvedArray","modalShow","setModalShow","useEffect","onClickSentenceButton","buttonValue","id","onRightButtonClick","onWrongButtonClick","prevState","onPositiveTrainingResult","button","value","onClickButtonNext","onCloseModal","jsxs","styles","jsx","elem","Button","TaskCongratulation","TrainingCongratulation","SentencesTrainingsPage","dispatch","useDispatch","setSentencesList","random","setRandom","originalLanguage","useSelector","jokeTasksSelectors","translationLanguage","tasks","error","loading","onClickTrainButton","fetchSentencesTasks","trainTask","task","fetchSentencesTasksByJokeTaskId","Fragment","ChooseLanguages","Spinner","Form","JokesList","ErrorMessage","SentencesTrainingsView"],"mappings":"2cAAA,MAAMA,EAAyBC,GAASA,EAAM,eAAe,MACvDC,EAA2BD,GAASA,EAAM,eAAe,QACzDE,EAAoBF,GAASA,EAAM,eAAe,MAElDG,EAA0B,CAC9B,uBAAAJ,EACA,yBAAAE,EACA,kBAAAC,CACF,sWCDA,SAAwBE,GAAmB,CACzC,cAAAC,EACA,mBAAAC,CACF,EAAG,CACD,KAAM,CAACC,EAAUC,CAAW,EAAIC,EAAAA,SAAS,CAAC,EACpC,CAACC,EAAOC,CAAQ,EAAIF,EAAAA,SAAS,CAAC,EAC9B,CAACG,EAAUC,CAAW,EAAIJ,EAAAA,SAAS,CAAC,EACpC,CAACK,EAAUC,CAAW,EAAIN,EAAAA,SAAS,EAAK,EACxC,CAACO,EAAYC,CAAa,EAAIR,EAAAA,SAAS,CAAC,EACxC,CAACS,EAAeC,CAAgB,EAAIV,EAAAA,SAAS,CAAA,CAAE,EAC/C,CAACW,EAAYC,CAAa,EAAIZ,EAAAA,SAAS,CAAA,CAAE,EACzC,CAACa,EAAeC,CAAgB,EAAId,EAAAA,SAAS,CAAA,CAAE,EAC/C,CAACe,EAAWC,CAAY,EAAIhB,EAAAA,SAAS,EAAK,EAEhDiB,EAAAA,UAAU,IAAM,CACVrB,EAAcW,CAAU,EAAE,aACXG,EAAA,CACf,GAAGd,EAAcW,CAAU,EAAE,YAC1B,MAAM,GAAG,EACT,OAAY,GAAA,EAAE,MAAM,CAAA,CACxB,CACH,EACC,CAACA,EAAYX,CAAa,CAAC,EAE9BqB,EAAAA,UAAU,IAAM,CACAL,EAAA,CACZ,GAAG,CAAC,GAAGH,CAAa,EAAE,KAAK,IAClB,GAAM,KAAK,OAAO,CAC1B,CAAA,CACF,EACDK,EAAiB,CAAA,CAAE,CAAA,EAClB,CAACL,CAAa,CAAC,EAElB,MAAMS,EAA6B,GAAA,CACjC,MAAMC,EAAc,EAAE,cAAc,aAAa,OAAO,EAClDC,EAAK,OAAO,SAAS,EAAE,cAAc,aAAa,SAAS,CAAC,EAE9DD,IAAgBV,EAAcX,CAAQ,EACrBuB,EAAA,EAAE,cAAeD,EAAID,CAAW,EAEnDG,EAAmB,EAAE,aAAa,EAExBlB,EAAAmB,GAAaA,EAAY,CAAC,EAClCzB,GAAYW,EAAc,OAAS,GACZe,EAAA,CAE7B,EAEMF,EAA+BG,GAAA,CAC1BvB,EAAAqB,GAAaA,EAAY,CAAC,EAC5BE,EAAA,UAAU,OAAO,aAAa,EAC9BA,EAAA,UAAU,IAAI,YAAY,EACjC,WAAW,IAAM,CACRA,EAAA,UAAU,OAAO,YAAY,EAC7BA,EAAA,UAAU,IAAI,aAAa,GACjC,GAAG,CACR,EAEMJ,EAAqB,CAACI,EAAQL,EAAIM,IAAU,CACzCD,EAAA,UAAU,OAAO,aAAa,EAC9BA,EAAA,UAAU,IAAI,aAAa,EAClC,WAAW,IAAM,CACfZ,EAAc,KAAKa,CAAK,EACxBD,EAAO,SAAW,GAClBA,EAAO,MAAM,MAAQ,cACrBA,EAAO,MAAM,WAAa,cAC1BA,EAAO,MAAM,YAAc,cACpBA,EAAA,UAAU,OAAO,aAAa,EAC9BA,EAAA,UAAU,IAAI,aAAa,EACtB1B,EAAAwB,GAAaA,EAAY,CAAC,GACrC,GAAG,CACR,EAEMC,EAA2B,IAAM,CACrC,WAAW,IAAM,CACfZ,EAAc,CAAA,CAAE,EAChBN,EAAY,EAAI,GACf,GAAG,CACR,EACMqB,EAAoB,IAAM,CAC1BpB,GAAcX,EAAc,OAAS,EACvCoB,EAAa,EAAI,EAEHR,EAAAe,GAAaA,EAAY,CAAC,EAE1CxB,EAAY,CAAC,EACbG,EAAS,CAAC,EACVE,EAAY,CAAC,EACbE,EAAY,EAAK,EACjBQ,EAAiB,CAAA,CAAE,CACrB,EAEMc,EAAe,IAAM,CACzBZ,EAAa,EAAK,EACCnB,EAAA,CACrB,EAEA,OACGgC,EAAAA,KAAA,MAAA,CAAI,UAAWC,EAAO,mBACrB,SAAA,CAAAC,EAAAA,IAAC,MAAG,SAA6B,+BAAA,CAAA,EAChC,CAACnC,EAAcW,CAAU,EAAE,gBACzB,KAAG,CAAA,UAAWuB,EAAO,QAAS,SAAqB,uBAAA,CAAA,EAEtDC,EAAAA,IAAC,KAAE,UAAWD,EAAO,iBAClB,SAAclC,EAAAW,CAAU,EAAE,SAC7B,EAEAwB,EAAAA,IAAC,MAAG,SAAgC,kCAAA,CAAA,EACnCF,EAAA,KAAA,KAAA,CAAG,UAAWC,EAAO,WACpB,SAAA,CAACD,EAAA,KAAA,KAAA,CAAG,UAAWC,EAAO,iBACpB,SAAA,CAAAC,EAAA,IAAC,KAAG,CAAA,UAAWD,EAAO,YAAa,SAAmB,sBAAA,EACrD,CAAClC,EAAcW,CAAU,EAAE,mBACzB,KAAG,CAAA,UAAWuB,EAAO,QAAS,SAAwB,0BAAA,CAAA,EAExDC,EAAA,IAAA,KAAA,CAAG,UAAWD,EAAO,SACnB,SAAWnB,EAAA,IAAI,CAACqB,EAAMZ,IACrBW,EAAA,IAAC,KAAY,CAAA,UAAWD,EAAO,eAC7B,SAAAC,EAAA,IAACE,EAAA,CACC,QAAQ,UACR,UAASb,EACT,QAASF,EACT,MAAOc,EACP,UAAWF,EAAO,iBAEjB,SAAAE,CAAA,CAAA,GARIZ,CAUT,CACD,EACH,EACCf,GACC0B,EAAA,IAACG,EAAA,CACC,SAAA/B,EACA,MAAAF,EACA,kBAAA0B,CAAA,CAAA,CACF,EAEJ,EACCE,EAAA,KAAA,KAAA,CAAG,UAAWC,EAAO,iBACpB,SAAA,CAAAC,EAAA,IAAC,KAAG,CAAA,UAAWD,EAAO,YAAa,SAAkB,qBAAA,EACrDC,EAAA,IAAC,KAAG,CAAA,UAAWD,EAAO,SACnB,SAAcjB,EAAA,IAAI,CAACmB,EAAMZ,IACxBW,EAAA,IAAC,KAAY,CAAA,UAAWD,EAAO,eAC7B,SAAAC,EAAAA,IAACE,EAAO,CAAA,QAAQ,UAAU,UAAWH,EAAO,iBACzC,SACHE,CAAA,CAAA,CAAA,EAHOZ,CAIT,CACD,CACH,CAAA,CAAA,CACF,CAAA,CAAA,EACF,EACAW,EAAA,IAACE,EAAA,CACC,QAAQ,UACR,QAASN,EACT,UAAWG,EAAO,WACnB,SAAA,WAAA,CAED,EACAC,EAAA,IAACI,EAAA,CACC,UAAApB,EACA,cAAea,EACf,mBAAmB,4DAAA,CAAA,CACrB,EACF,CAEJ,sFC5JA,SAAwBQ,IAAyB,CAC/C,MAAMC,EAAWC,EAAY,EAC7BrB,EAAAA,UAAU,IAAM,CACP,OAAA,SAAS,EAAG,IAAK,CAC1B,EAAG,EAAE,EACL,KAAM,CAACrB,EAAe2C,CAAgB,EAAIvC,EAAAA,SAAS,CAAA,CAAE,EAC/C,CAACwC,EAAQC,CAAS,EAAIzC,EAAAA,SAAS,EAAK,EACpC0C,EAAmBC,EAAYC,EAAmB,mBAAmB,EACrEC,EAAsBF,EAC1BC,EAAmB,sBACrB,EACME,EAAQH,EAAYjD,EAAwB,iBAAiB,EAC7DqD,EAAQJ,EAAYjD,EAAwB,sBAAsB,EAClEsD,EAAUL,EAAYjD,EAAwB,wBAAwB,EAEtEuD,EAAqB,IAAM,CAC/BZ,EACEa,EACER,EAAiB,cACjBG,EAAoB,cACpB,EAAA,CAEJ,CACF,EAEA5B,EAAAA,UAAU,IAAM,CACdsB,EAAiBO,CAAK,CAAA,EACrB,CAACA,CAAK,CAAC,EAEV,MAAMjD,EAAqB,IAAM,CAC/B0C,EAAiB,CAAA,CAAE,CACrB,EAEMY,EAAoBC,GAAA,CACxBf,EACEgB,EACED,EAAK,IACLV,EAAiB,cACjBG,EAAoB,cACpBL,CAAA,CAEJ,CACF,EAEA,cACG,MACC,CAAA,SAAA,CAAAT,EAAAA,IAAC,MAAG,SAAmB,qBAAA,CAAA,EACtB,CAACnC,EAAc,CAAC,GAEbiC,EAAA,KAAAyB,EAAA,SAAA,CAAA,SAAA,CAAAvB,EAAA,IAACwB,EAAgB,EAAA,EACjB1B,EAAA,KAACI,EAAA,CACC,QAAQ,UACR,QAASgB,EACT,UAAWnB,GAAO,YAEjB,SAAA,CAAC,CAAAkB,GACCjB,EAAAA,IAAA,OAAA,CAAK,SAEN,kEAAA,CAAA,EAEDiB,SAAYQ,EAAQ,CAAA,UAAU,SAAS,GAAG,OAAO,KAAK,IAAK,CAAA,CAAA,CAAA,CAC9D,EACAzB,EAAA,IAAC0B,EAAK,MAAL,CACC,KAAK,WACL,QAASjB,EACT,SAAU,IAAMC,EAAU,CAACD,CAAM,EACjC,MAAM,kCAAA,CACR,EACAT,EAAAA,IAAC2B,EAAU,CAAA,WAAYP,CAAW,CAAA,CAAA,EACpC,EAGDvD,EAAc,CAAC,GACdmC,EAAA,IAACpC,GAAA,CACC,cAAAC,EACA,mBAAAC,CAAA,CACF,EAEDkD,GAAShB,EAAAA,IAAC4B,EAAa,CAAA,QAASZ,CAAO,CAAA,CAAA,EAC1C,CAEJ,CC/FA,SAAwBa,IAAyB,CAE7C,OAAA7B,EAAAA,IAAAuB,EAAAA,SAAA,CACE,SAACvB,EAAAA,IAAAK,GAAA,CAAuB,CAAA,EAC1B,CAEJ"}