{"version":3,"file":"TextTranscriptionView-DQIPuger.js","sources":["../../src/redux/text-transcription/text-transcription-selectors.js","../../src/redux/text-transcription/text-transcription-operations.js","../../src/components/TextTranscriptionPage/TextTranscriptionPage.jsx","../../src/views/TextTranscriptionView/TextTranscriptionView.jsx"],"sourcesContent":["const getEnglishText = state => state.textTranscription.englishText;\nconst getTranscriptedText = state => state.textTranscription.transcriptedText;\nconst getLoading = state => state.textTranscription.loading;\nconst getError = state => state.textTranscription.error;\n\nconst textTranscriptionSelectors = {\n  getEnglishText,\n  getTranscriptedText,\n  getLoading,\n  getError,\n};\nexport default textTranscriptionSelectors;\n","import {\n  fetchTextTranscriptionRequest,\n  fetchTextTranscriptionSuccess,\n  fetchTextTranscriptionError,\n} from './text-transcription-actions';\nimport axios from 'axios';\n\nexport const fetchTextTranscription = textData => async dispatch => {\n  dispatch(fetchTextTranscriptionRequest());\n  try {\n    const { data } = await axios.post(\n      `/text-transcription/trancript-text`,\n      textData,\n    );\n    dispatch(fetchTextTranscriptionSuccess(data.text));\n  } catch (error) {\n    dispatch(\n      fetchTextTranscriptionError(\n        error.response ? error.response.data.message : error.message,\n      ),\n    );\n  }\n};\n","import { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Button, Form, Spinner, Dropdown } from 'react-bootstrap';\nimport { changeEnglishText } from '../../redux/text-transcription/text-transcription-actions';\nimport textTranscriptionSelectors from '../../redux/text-transcription/text-transcription-selectors';\nimport { fetchTextTranscription } from '../../redux/text-transcription/text-transcription-operations';\n\nimport ErrorMessage from '../ErrorMessage/ErrorMessage';\nimport styles from './TextTranscriptionPage.module.css';\n\nconst fields = ['U-transcription'];\n\nexport default function TextTranscriptionPage() {\n  const [taranscriptedArray, setTaranscriptedArray] = useState([]);\n  const [dropdownValue, setDropdownValue] = useState(fields[0]);\n\n  useEffect(() => {\n    window.scrollBy(0, -1000);\n  }, []);\n  const dispatch = useDispatch();\n  const englishText = useSelector(textTranscriptionSelectors.getEnglishText);\n  const transcriptedText = useSelector(\n    textTranscriptionSelectors.getTranscriptedText,\n  );\n  const loading = useSelector(textTranscriptionSelectors.getLoading);\n  const error = useSelector(textTranscriptionSelectors.getError);\n  const englishTextHandleChange = ({ target: { value } }) => {\n    dispatch(changeEnglishText(value));\n  };\n\n  const onTranscriptTextButtonClick = () => {\n    dispatch(\n      fetchTextTranscription({ englishText, transcriptionType: dropdownValue }),\n    );\n  };\n  const onDropdownClick = ({ target: { name } }) => {\n    setDropdownValue(name);\n    if (englishText) {\n      dispatch(\n        fetchTextTranscription({\n          englishText,\n          transcriptionType: name,\n        }),\n      );\n    }\n  };\n\n  useEffect(() => {\n    setTaranscriptedArray(transcriptedText.split(' '));\n  }, [transcriptedText]);\n\n  return (\n    <div className={styles.TextTranscriptionPageBox}>\n      <h2>Text transcription</h2>\n\n      <Dropdown>\n        <Dropdown.Toggle variant=\"outline-dark\" size=\"sm\" id=\"dropdown-basic\">\n          {dropdownValue}\n        </Dropdown.Toggle>\n\n        <Dropdown.Menu>\n          <ul>\n            {fields.map(field => (\n              <li key={field}>\n                <Dropdown.Item name={field} onClick={onDropdownClick}>\n                  {field}\n                </Dropdown.Item>\n              </li>\n            ))}\n          </ul>\n        </Dropdown.Menu>\n      </Dropdown>\n      <Form autoComplete=\"off\" className={styles.Form}>\n        <Form.Group className=\"mb-3\">\n          <Form.Label>Enter the text to be transcripted in English:</Form.Label>\n          <Form.Control\n            as=\"textarea\"\n            rows={7}\n            name=\"englishText\"\n            placeholder=\"Enter text in English\"\n            value={englishText}\n            onChange={englishTextHandleChange}\n          />\n        </Form.Group>\n      </Form>\n      <Button\n        variant=\"primary\"\n        className={styles.transcriptTextButton}\n        onClick={onTranscriptTextButtonClick}\n      >\n        {!loading && <span>Letâ€™s transcript text</span>}\n        {loading && <Spinner animation=\"border\" as=\"span\" size=\"sm\" />}\n      </Button>\n      <Form autoComplete=\"off\" className={styles.Form}>\n        <Form.Group className=\"mb-3\">\n          <Form.Label>Transcripted text:</Form.Label>\n          <div>\n            {taranscriptedArray[0] &&\n              taranscriptedArray.map( (e, i) =>\n                e[0] === '#' ? (\n                  <span key={i} style={{ backgroundColor: 'yellow' }}>\n                    {e.slice(1) + ' '}\n                  </span>\n                ) : (\n                  <span key={i}>{e + ' '}</span>\n                ),\n              )}\n          </div>\n        </Form.Group>\n      </Form>\n      {error && <ErrorMessage message={error} />}\n    </div>\n  );\n}\n","import TextTranscriptionPage from '../../components/TextTranscriptionPage/TextTranscriptionPage';\nexport default function TextTranscriptionView() {\n  return (\n    <>\n      <TextTranscriptionPage />\n    </>\n  );\n}\n"],"names":["getEnglishText","state","getTranscriptedText","getLoading","getError","textTranscriptionSelectors","fetchTextTranscription","textData","dispatch","fetchTextTranscriptionRequest","data","axios","fetchTextTranscriptionSuccess","error","fetchTextTranscriptionError","fields","TextTranscriptionPage","taranscriptedArray","setTaranscriptedArray","useState","dropdownValue","setDropdownValue","useEffect","useDispatch","englishText","useSelector","transcriptedText","loading","englishTextHandleChange","value","changeEnglishText","onTranscriptTextButtonClick","onDropdownClick","name","jsxs","styles","jsx","Dropdown","field","Form","Button","Spinner","e","i","ErrorMessage","TextTranscriptionView","Fragment"],"mappings":"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"}