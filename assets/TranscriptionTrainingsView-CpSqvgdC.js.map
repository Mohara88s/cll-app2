{"version":3,"file":"TranscriptionTrainingsView-CpSqvgdC.js","sources":["../../src/components/EngUTranscriptionTrainings/EngUTranscriptionTrainings.jsx","../../src/components/UEngTranscriptionTrainings/UEngTranscriptionTrainings.jsx","../../src/components/TranscriptionTrainingsPage/TranscriptionTrainingsPage.jsx","../../src/views/TranscriptionTrainingsView/TranscriptionTrainingsView.jsx"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { Button } from 'react-bootstrap';\nimport TaskCongratulation from '../TaskCongratulation/TaskCongratulation';\nimport TrainingCongratulation from '../TrainingCongratulation/TrainingCongratulation';\nimport PropTypes from 'prop-types';\nimport styles from './EngUTranscriptionTrainings.module.css';\n\nexport default function EngUTranscriptionTrainings({\n  tasksArr,\n  onResolvedTraining,\n}) {\n  const [actualId, setActualId] = useState(0);\n  const [losts, setLosts] = useState(0);\n  const [attempts, setAttempts] = useState(0);\n  const [resolved, setResolved] = useState(false);\n  const [taskId, setTaskId] = useState(0);\n  const [originalArray, setOriginalArray] = useState([]);\n  const [mixedArray, setMixedArray] = useState([]);\n  const [resolvedArray, setResolvedArray] = useState([]);\n  const [modalShow, setModalShow] = useState(false);\n\n  useEffect(() => {\n    setOriginalArray([...tasksArr[taskId].utrn]);\n  }, [taskId, tasksArr]);\n\n  useEffect(() => {\n    setMixedArray([\n      ...[...originalArray].sort(() => {\n        return 0.5 - Math.random();\n      }),\n    ]);\n  }, [originalArray]);\n\n  const onClickCharButton = e => {\n    const buttonValue = e.currentTarget.getAttribute('value');\n    const id = Number.parseInt(e.currentTarget.getAttribute('data-id'));\n\n    if (buttonValue === originalArray[actualId]) {\n      onRightButtonClick(e.currentTarget, id, buttonValue);\n    } else {\n      onWrongButtonClick(e.currentTarget);\n    }\n    setAttempts(prevState => prevState + 1);\n    if (actualId >= originalArray.length - 1) {\n      onPositiveTrainingResult();\n    }\n  };\n\n  const onWrongButtonClick = button => {\n    setLosts(prevState => prevState + 1);\n    button.classList.remove('btn-primary');\n    button.classList.add('btn-danger');\n    setTimeout(() => {\n      button.classList.remove('btn-danger');\n      button.classList.add('btn-primary');\n    }, 300);\n  };\n\n  const onRightButtonClick = (button, id, value) => {\n    button.classList.remove('btn-primary');\n    button.classList.add('btn-success');\n    setTimeout(() => {\n      resolvedArray.push(value);\n      button.classList.remove('btn-success');\n      button.classList.add('btn-primary');\n      button.disabled = true;\n      button.style.color = 'transparent';\n      button.style.background = 'transparent';\n      button.style.borderColor = 'transparent';\n      setActualId(prevState => prevState + 1);\n    }, 300);\n  };\n\n  const onPositiveTrainingResult = () => {\n    setTimeout(() => {\n      setMixedArray([]);\n      setResolved(true);\n    }, 300);\n  };\n\n  const onClickButtonNext = () => {\n    if (taskId >= tasksArr.length - 1) {\n      setModalShow(true);\n    } else {\n      setTaskId(prevState => prevState + 1);\n    }\n    setActualId(0);\n    setLosts(0);\n    setAttempts(0);\n    setResolved(false);\n    setResolvedArray([]);\n  };\n\n  const onCloseModal = () => {\n    setModalShow(false);\n    onResolvedTraining();\n  };\n\n  return (\n    <>\n      <h3>English word:</h3>\n      {!tasksArr[taskId].eng && (\n        <h3 className={styles.warning}>no available</h3>\n      )}\n      <p className={styles.trainingWord}>{tasksArr[taskId].eng}</p>\n      <h3>Translation:</h3>\n      {!tasksArr[taskId].rus && (\n        <h3 className={styles.warning}>no available</h3>\n      )}\n      <p className={styles.trainslation}>\n        {tasksArr[taskId].rus.split('/')[0]}\n      </p>\n\n      <h3>Select U-transcription for the following english word:</h3>\n      <ul className={styles.fealdsList}>\n        <li className={styles.fealdsList__item}>\n          <h4 className={styles.fealdHeader}>Unresolved field</h4>\n          {!tasksArr[taskId].utrn && (\n            <h3 className={styles.warning}>no available</h3>\n          )}\n          <ul className={styles.listTags}>\n            {mixedArray.map((elem, id) => (\n              <li key={id} className={styles.listTags__item}>\n                <Button\n                  variant=\"primary\"\n                  data-id={id}\n                  onClick={onClickCharButton}\n                  value={elem}\n                  className={styles.listTags__button}\n                >\n                  {elem}\n                </Button>\n              </li>\n            ))}\n          </ul>\n          {resolved && (\n            <TaskCongratulation\n              attempts={attempts}\n              losts={losts}\n              onClickButtonNext={onClickButtonNext}\n            />\n          )}\n        </li>\n        <li className={styles.fealdsList__item}>\n          <h4 className={styles.fealdHeader}>Resolved field</h4>\n          <ul className={styles.listTags}>\n            {resolvedArray.map((elem, id) => (\n              <li key={id} className={styles.listTags__item}>\n                <Button variant=\"primary\" className={styles.listTags__button}>\n                  {elem}\n                </Button>\n              </li>\n            ))}\n          </ul>\n        </li>\n      </ul>\n      <Button\n        variant=\"primary\"\n        onClick={onClickButtonNext}\n        className={styles.skipButton}\n      >\n        Skip task\n      </Button>\n      <TrainingCongratulation\n        modalShow={modalShow}\n        onHandleClose={onCloseModal}\n      />\n    </>\n  );\n}\n\nEngUTranscriptionTrainings.propTypes = {\n  tasksArr: PropTypes.arrayOf(\n    PropTypes.shape({\n      _id: PropTypes.number.isRequired,\n      eng: PropTypes.string.isRequired,\n      utrn: PropTypes.string.isRequired,\n      rus: PropTypes.string.isRequired,\n    }),\n  ),\n};\n","import { useState, useEffect } from 'react';\nimport { Button } from 'react-bootstrap';\nimport TaskCongratulation from '../TaskCongratulation/TaskCongratulation';\nimport TrainingCongratulation from '../TrainingCongratulation/TrainingCongratulation';\nimport PropTypes from 'prop-types';\nimport styles from './UEngTranscriptionTrainings.module.css';\n\nexport default function UEngTranscriptionTrainings({\n  tasksArr,\n  onResolvedTraining,\n}) {\n  const [actualId, setActualId] = useState(0);\n  const [losts, setLosts] = useState(0);\n  const [attempts, setAttempts] = useState(0);\n  const [resolved, setResolved] = useState(false);\n  const [taskId, setTaskId] = useState(0);\n  const [originalArray, setOriginalArray] = useState([]);\n  const [mixedArray, setMixedArray] = useState([]);\n  const [resolvedArray, setResolvedArray] = useState([]);\n  const [modalShow, setModalShow] = useState(false);\n\n  useEffect(() => {\n    setOriginalArray([...tasksArr[taskId].eng]);\n  }, [taskId, tasksArr]);\n\n  useEffect(() => {\n    setMixedArray([\n      ...[...originalArray].sort(() => {\n        return 0.5 - Math.random();\n      }),\n    ]);\n  }, [originalArray]);\n\n  const onClickCharButton = e => {\n    const buttonValue = e.currentTarget.getAttribute('value');\n    const id = Number.parseInt(e.currentTarget.getAttribute('data-id'));\n\n    if (buttonValue === originalArray[actualId]) {\n      onRightButtonClick(e.currentTarget, id, buttonValue);\n    } else {\n      onWrongButtonClick(e.currentTarget);\n    }\n    setAttempts(prevState => prevState + 1);\n    if (actualId >= originalArray.length - 1) {\n      onPositiveTrainingResult();\n    }\n  };\n\n  const onWrongButtonClick = button => {\n    setLosts(prevState => prevState + 1);\n    button.classList.remove('btn-primary');\n    button.classList.add('btn-danger');\n    setTimeout(() => {\n      button.classList.remove('btn-danger');\n      button.classList.add('btn-primary');\n    }, 300);\n  };\n\n  const onRightButtonClick = (button, id, value) => {\n    button.classList.remove('btn-primary');\n    button.classList.add('btn-success');\n    setTimeout(() => {\n      resolvedArray.push(value);\n      button.classList.remove('btn-success');\n      button.classList.add('btn-primary');\n      button.disabled = true;\n      button.style.color = 'transparent';\n      button.style.background = 'transparent';\n      button.style.borderColor = 'transparent';\n      setActualId(prevState => prevState + 1);\n    }, 300);\n  };\n\n  const onPositiveTrainingResult = () => {\n    setTimeout(() => {\n      setMixedArray([]);\n      setResolved(true);\n    }, 300);\n  };\n\n  const onClickButtonNext = () => {\n    if (taskId >= tasksArr.length - 1) {\n      setModalShow(true);\n    } else {\n      setTaskId(prevState => prevState + 1);\n    }\n    setActualId(0);\n    setLosts(0);\n    setAttempts(0);\n    setResolved(false);\n    setResolvedArray([]);\n  };\n\n  const onCloseModal = () => {\n    setModalShow(false);\n    onResolvedTraining();\n  };\n\n  return (\n    <>\n      <h3>U-transcription:</h3>\n      {!tasksArr[taskId].utrn && (\n        <h3 className={styles.warning}>no available</h3>\n      )}\n      <p className={styles.trainingWord}>{tasksArr[taskId].utrn}</p>\n      <h3>Translation:</h3>\n      {!tasksArr[taskId].rus && (\n        <h3 className={styles.warning}>no available</h3>\n      )}\n      <p className={styles.trainslation}>\n        {tasksArr[taskId].rus.split('/')[0]}\n      </p>\n\n      <h3>Make a word from the letters according to this U-transcription:</h3>\n      <ul className={styles.fealdsList}>\n        <li className={styles.fealdsList__item}>\n          <h4 className={styles.fealdHeader}>Unresolved field</h4>\n          {!tasksArr[taskId].eng && (\n            <h3 className={styles.warning}>no available</h3>\n          )}\n          <ul className={styles.listTags}>\n            {mixedArray.map((elem, id) => (\n              <li key={id} className={styles.listTags__item}>\n                <Button\n                  variant=\"primary\"\n                  data-id={id}\n                  onClick={onClickCharButton}\n                  value={elem}\n                  className={styles.listTags__button}\n                >\n                  {elem}\n                </Button>\n              </li>\n            ))}\n          </ul>\n          {resolved && (\n            <TaskCongratulation\n              attempts={attempts}\n              losts={losts}\n              onClickButtonNext={onClickButtonNext}\n            />\n          )}\n        </li>\n        <li className={styles.fealdsList__item}>\n          <h4 className={styles.fealdHeader}>Resolved field</h4>\n          <ul className={styles.listTags}>\n            {resolvedArray.map((elem, id) => (\n              <li key={id} className={styles.listTags__item}>\n                <Button variant=\"primary\" className={styles.listTags__button}>\n                  {elem}\n                </Button>\n              </li>\n            ))}\n          </ul>\n        </li>\n      </ul>\n      <Button\n        variant=\"primary\"\n        onClick={onClickButtonNext}\n        className={styles.skipButton}\n      >\n        Skip task\n      </Button>\n      <TrainingCongratulation\n        modalShow={modalShow}\n        onHandleClose={onCloseModal}\n      />\n    </>\n  );\n}\n\nUEngTranscriptionTrainings.propTypes = {\n  tasksArr: PropTypes.arrayOf(\n    PropTypes.shape({\n      _id: PropTypes.number.isRequired,\n      eng: PropTypes.string.isRequired,\n      utrn: PropTypes.string.isRequired,\n      rus: PropTypes.string.isRequired,\n    }),\n  ),\n};\n","import { useState, useEffect } from 'react';\nimport { useSelector } from 'react-redux';\nimport OwnDictionaries from '../OwnDictionaries/OwnDictionaries';\nimport EngUTranscriptionTrainings from '../EngUTranscriptionTrainings/EngUTranscriptionTrainings';\nimport UEngTranscriptionTrainings from '../UEngTranscriptionTrainings/UEngTranscriptionTrainings';\nimport { Button } from 'react-bootstrap';\nimport ownDictionariesSelectors from '../../redux/own-dictionaries/own-dictionaries-selectors';\nimport styles from './TranscriptionTrainingsPage.module.css';\n\nconst trainings = ['english - u-transcription', 'u-transcription - english'];\n\nexport default function TranscriptionTrainingsPage() {\n  useEffect(() => {\n    window.scrollBy(0, -1000);\n  }, []);\n  const [ownDictionariesIsOpen, setOwnDictionariesIsOpen] = useState(true);\n  const [trainingButtonsIsOpen, setTrainingButtonsIsOpen] = useState(true);\n  const [selectedTaining, setSelectedTraining] = useState('');\n\n  const onTrainingButtonClick = ({ currentTarget: { value } }) => {\n    setSelectedTraining(value);\n    setTrainingButtonsIsOpen(false);\n  };\n\n  const onChooseTrainingClick = () => {\n    setTrainingButtonsIsOpen(true);\n  };\n\n  const currentDictionary = useSelector(\n    ownDictionariesSelectors.getCurrentDictionary,\n  );\n\n  useEffect(() => {\n    if (currentDictionary.ownDictionaryName) setOwnDictionariesIsOpen(false);\n  }, [currentDictionary]);\n\n  const onChooseDictionaryClick = () => {\n    setOwnDictionariesIsOpen(true);\n  };\n\n  const onResolvedTraining = () => {\n    setOwnDictionariesIsOpen(true);\n    setTrainingButtonsIsOpen(true);\n    setSelectedTraining('');\n  };\n  return (\n    <div>\n      <h2>Transcription trainings</h2>\n      <ul className={styles.optionsButtonsList}>\n        <li className={styles.optionsButtonsList__item}>\n          {!trainingButtonsIsOpen && (\n            <Button\n              name=\"chooseTraining\"\n              onClick={onChooseTrainingClick}\n              variant=\"primary\"\n            >\n              Choose another training\n            </Button>\n          )}\n        </li>\n        <li className={styles.optionsButtonsList__item}>\n          {!ownDictionariesIsOpen && (\n            <Button\n              name=\"chooseDictionary\"\n              onClick={onChooseDictionaryClick}\n              variant=\"primary\"\n            >\n              Choose another dictionary\n            </Button>\n          )}\n        </li>\n      </ul>\n\n      {trainingButtonsIsOpen && (\n        <>\n          <h3>Choose type of training:</h3>\n          <ul className={styles.trainingButtonsList}>\n            {trainings.map(training => (\n              <li key={training} className={styles.trainingButtonsList__item}>\n                <Button\n                  onClick={onTrainingButtonClick}\n                  value={training}\n                  className={\n                    training === selectedTaining\n                      ? 'btn btn-primary btn-lg'\n                      : 'btn btn-secondary'\n                  }\n                >\n                  {training}\n                </Button>\n              </li>\n            ))}\n          </ul>\n        </>\n      )}\n\n      {ownDictionariesIsOpen && (\n        <>\n          <h3>Choose own dictionary for training:</h3>\n          <OwnDictionaries />\n        </>\n      )}\n\n      {!ownDictionariesIsOpen &&\n        !trainingButtonsIsOpen &&\n        currentDictionary.ownDictionaryName &&\n        selectedTaining === trainings[0] && (\n          <EngUTranscriptionTrainings\n            tasksArr={currentDictionary.ownDictionaryTasks}\n            onResolvedTraining={onResolvedTraining}\n          />\n        )}\n\n      {!ownDictionariesIsOpen &&\n        !trainingButtonsIsOpen &&\n        currentDictionary.ownDictionaryName &&\n        selectedTaining === trainings[1] && (\n          <UEngTranscriptionTrainings\n            tasksArr={currentDictionary.ownDictionaryTasks}\n            onResolvedTraining={onResolvedTraining}\n          />\n        )}\n    </div>\n  );\n}\n","import TranscriptionTrainingsPage from '../../components/TranscriptionTrainingsPage/TranscriptionTrainingsPage';\nexport default function TranscriptionTrainingsView() {\n  return (\n    <>\n      <TranscriptionTrainingsPage />\n    </>\n  );\n}\n"],"names":["EngUTranscriptionTrainings","tasksArr","onResolvedTraining","actualId","setActualId","useState","losts","setLosts","attempts","setAttempts","resolved","setResolved","taskId","setTaskId","originalArray","setOriginalArray","mixedArray","setMixedArray","resolvedArray","setResolvedArray","modalShow","setModalShow","useEffect","onClickCharButton","e","buttonValue","id","onRightButtonClick","onWrongButtonClick","prevState","onPositiveTrainingResult","button","value","onClickButtonNext","onCloseModal","jsxs","Fragment","jsx","styles","elem","Button","TaskCongratulation","TrainingCongratulation","PropTypes","UEngTranscriptionTrainings","trainings","TranscriptionTrainingsPage","ownDictionariesIsOpen","setOwnDictionariesIsOpen","trainingButtonsIsOpen","setTrainingButtonsIsOpen","selectedTaining","setSelectedTraining","onTrainingButtonClick","onChooseTrainingClick","currentDictionary","useSelector","ownDictionariesSelectors","onChooseDictionaryClick","training","OwnDictionaries","TranscriptionTrainingsView"],"mappings":"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"}