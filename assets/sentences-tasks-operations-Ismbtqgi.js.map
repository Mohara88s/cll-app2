{"version":3,"file":"sentences-tasks-operations-Ismbtqgi.js","sources":["../../src/components/JokesList/JokesList.jsx","../../src/redux/sentences-tasks/sentences-tasks-operations.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Button, Form, Table, Spinner } from 'react-bootstrap';\nimport { changeFilter } from '../../redux/joke-tasks/joke-tasks-actions';\nimport jokeTasksSelectors from '../../redux/joke-tasks/joke-tasks-selectors';\nimport { fetchJokeTasks } from '../../redux/joke-tasks/joke-tasks-operations';\nimport ErrorMessage from '../ErrorMessage/ErrorMessage';\nimport styles from './JokesList.module.css';\n\nexport default function JokesList({ passUpTask, adminMode = false }) {\n  const dispatch = useDispatch();\n  const originalLanguage = useSelector(jokeTasksSelectors.getOriginalLanguage);\n  const translationLanguage = useSelector(\n    jokeTasksSelectors.getTranslationLanguage,\n  );\n  const tasks = useSelector(jokeTasksSelectors.getJokeTasks);\n  const error = useSelector(jokeTasksSelectors.getJokeTasksError);\n  const loading = useSelector(jokeTasksSelectors.getJokeTasksLoading);\n  const filter = useSelector(jokeTasksSelectors.getJokeTasksFilter);\n  const [filtredTasks, setFiltredTasks] = useState([]);\n\n  const filterHandleChange = ({ target: { value } }) => {\n    dispatch(changeFilter(value));\n  };\n\n  const onTrainBtnClick = ({ target: { name } }) => {\n    const task = filtredTasks.find(e => e._id === name);\n    passUpTask(task);\n  };\n\n  useEffect(() => {\n    if (originalLanguage !== null && translationLanguage !== null) {\n      dispatch(\n        fetchJokeTasks(\n          filter,\n          originalLanguage.language_name,\n          translationLanguage.language_name,\n        ),\n      );\n    }\n  }, [dispatch, filter, originalLanguage, translationLanguage]);\n\n  useEffect(() => {\n    setFiltredTasks(tasks);\n  }, [tasks]);\n\n  return (\n    <div className={styles.tasksFilter}>\n      <Form autoComplete=\"off\">\n        <Form.Group className=\"mb-3\" controlId=\"filter\">\n          <Form.Label>Jokes search:</Form.Label>\n          <Form.Control\n            type=\"text\"\n            name=\"filter\"\n            placeholder=\"Enter letters for joke search\"\n            value={filter}\n            onChange={filterHandleChange}\n          />\n        </Form.Group>\n      </Form>\n\n      <Table striped bordered hover className={styles.table}>\n        <thead>\n          <tr>\n            <td className={styles.tableTd__english}>Title</td>\n            <td className={styles.tableTd__languages}>Translations</td>\n            <td className={styles.tableTd__button}></td>\n          </tr>\n        </thead>\n        {!loading && (\n          <tbody className={styles.table__tbody}>\n            {filtredTasks.map(({ _id, task_title, languages }) => (\n              <tr key={_id}>\n                <td>{task_title}</td>\n                <td>\n                  {[...languages]\n                    .sort((e, i) =>\n                      e.language_name.localeCompare(i.language_name),\n                    )\n                    .map(({ language_name }) => (\n                      <span key={language_name}>{language_name}/</span>\n                    ))}\n                </td>\n                <td>\n                  <Button\n                    name={_id}\n                    onClick={onTrainBtnClick}\n                    variant=\"primary\"\n                  >\n                    Train\n                  </Button>\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        )}\n      </Table>\n      {error && <ErrorMessage message={error} />}\n      {loading && <Spinner animation=\"border\" variant=\"primary\" />}\n    </div>\n  );\n}\n","import {\n  fetchSentencesTasksRequest,\n  fetchSentencesTasksSuccess,\n  fetchSentencesTasksError,\n  fetchSentencesTasksByJokeTaskIdRequest,\n  fetchSentencesTasksByJokeTaskIdSuccess,\n  fetchSentencesTasksByJokeTaskIdError,\n} from './sentences-tasks-actions';\nimport axios from 'axios';\n\nexport const fetchSentencesTasks =\n  (originalLanguage, translationLanguage, limit = 20) =>\n  async dispatch => {\n    dispatch(fetchSentencesTasksRequest());\n    try {\n      const { data } = await axios.get(\n        `/sentences-tasks?limit=${limit}&original_language=${originalLanguage}&translation_language=${translationLanguage}`,\n      );\n      dispatch(fetchSentencesTasksSuccess(data.tasks));\n    } catch (error) {\n      dispatch(\n        fetchSentencesTasksError(\n          error.response ? error.response.data.message : error.message,\n        ),\n      );\n    }\n  };\n\nexport const fetchSentencesTasksByJokeTaskId =\n  (jokeTaskId, originalLanguage, translationLanguage, random) =>\n  async dispatch => {\n    dispatch(fetchSentencesTasksByJokeTaskIdRequest());\n    try {\n      const { data } = await axios.get(\n        `/sentences-tasks/${jokeTaskId}?original_language=${originalLanguage}&translation_language=${translationLanguage}${\n          random ? `&random=${random}` : ``\n        }`,\n      );\n      dispatch(fetchSentencesTasksByJokeTaskIdSuccess(data.tasks));\n    } catch (error) {\n      dispatch(\n        fetchSentencesTasksByJokeTaskIdError(\n          error.response ? error.response.data.message : error.message,\n        ),\n      );\n    }\n  };\n"],"names":["JokesList","passUpTask","adminMode","dispatch","useDispatch","originalLanguage","useSelector","jokeTasksSelectors","translationLanguage","tasks","error","loading","filter","filtredTasks","setFiltredTasks","useState","filterHandleChange","value","changeFilter","onTrainBtnClick","name","task","e","useEffect","fetchJokeTasks","jsxs","styles","jsx","Form","Table","_id","task_title","languages","i","language_name","Button","ErrorMessage","Spinner","fetchSentencesTasks","limit","fetchSentencesTasksRequest","data","axios","fetchSentencesTasksSuccess","fetchSentencesTasksError","fetchSentencesTasksByJokeTaskId","jokeTaskId","random","fetchSentencesTasksByJokeTaskIdRequest","fetchSentencesTasksByJokeTaskIdSuccess","fetchSentencesTasksByJokeTaskIdError"],"mappings":"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"}